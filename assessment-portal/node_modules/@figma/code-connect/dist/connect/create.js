"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCodeConnectFromUrl = void 0;
const helpers_1 = require("./helpers");
const axios_1 = __importStar(require("axios"));
const fs_1 = __importDefault(require("fs"));
const prettier = __importStar(require("prettier"));
const figma_rest_api_1 = require("./figma_rest_api");
const logging_1 = require("../common/logging");
const lodash_1 = require("lodash");
function isBooleanKind(propValue) {
    const normalized = propValue.toLowerCase();
    return (normalized === 'true' ||
        normalized === 'false' ||
        normalized === 'yes' ||
        normalized === 'no' ||
        normalized === 'on' ||
        normalized === 'off');
}
function normalizePropName(name) {
    return name.replace(/#[0-9:]*/g, '');
}
function generateCodePropName(name) {
    return (0, lodash_1.camelCase)(name.replace(/[^a-zA-Z]/g, ''));
}
function normalizePropValue(name) {
    // Convert the string to kebab-case
    return name.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase();
}
function normalizeComponentName(name) {
    // Convert the string to PascalCase and ensure first character is not a digit
    return name
        .replace(/[^a-zA-Z0-9]/g, ' ')
        .split(' ')
        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
        .join('')
        .replace(/^[0-9]/, '_$&');
}
function generateProps(component) {
    const props = [];
    if (!component.componentPropertyDefinitions ||
        Object.keys(component.componentPropertyDefinitions).length === 0) {
        return `{}`;
    }
    for (const [propName, propDef] of Object.entries(component.componentPropertyDefinitions)) {
        const codePropName = generateCodePropName(propName);
        const figmaPropName = normalizePropName(propName);
        if (propDef.type === 'BOOLEAN') {
            props.push(`"${codePropName}": figma.boolean('${figmaPropName}')`);
        }
        if (propDef.type === 'TEXT') {
            props.push(`"${codePropName}": figma.string('${figmaPropName}')`);
        }
        if (propDef.type === 'VARIANT') {
            if (propDef.variantOptions?.find((value) => isBooleanKind(value))) {
                props.push(`"${codePropName}": figma.boolean('${figmaPropName}')`);
            }
            else {
                props.push(`"${codePropName}": figma.enum('${figmaPropName}', { \n${propDef.variantOptions
                    ?.map((value) => `  "${value}": "${normalizePropValue(value)}"`)
                    .join(',\n')}})`);
            }
        }
        if (propDef.type === 'INSTANCE_SWAP') {
            props.push(`"${codePropName}": figma.instance('${figmaPropName}')`);
        }
    }
    return `{
  ${props.join(',\n  ')}
}`;
}
async function createCodeConnectFromUrl({ accessToken, figmaNodeUrl, outFile, }) {
    const fileKey = (0, helpers_1.parseFileKey)(figmaNodeUrl);
    const nodeIds = (0, helpers_1.parseNodeIds)([figmaNodeUrl]);
    const apiUrl = (0, figma_rest_api_1.getApiUrl)(figmaNodeUrl ?? '') + `/files/${fileKey}?ids=${nodeIds.join(',')}`;
    try {
        logging_1.logger.info('Fetching component information from Figma...');
        const response = await axios_1.default.get(apiUrl, {
            headers: {
                'X-Figma-Token': accessToken,
                'Content-Type': 'application/json',
            },
        });
        if (response.status === 200) {
            logging_1.logger.info('Parsing response');
            const component = (0, helpers_1.findComponentsInDocument)(response.data.document, nodeIds)[0];
            const componentName = normalizeComponentName(component.name);
            logging_1.logger.info('Generating Code Connect file...');
            const codeConnect = `
import React from 'react'
import { ${componentName} } from './${componentName}'
import figma from '@figma/code-connect'

/**
 * -- This file was auto-generated by \`figma connect create\` --
 * \`props\` includes a mapping from Figma properties and variants to
 * suggested values. You should update this to match the props of your
 * code component, and update the \`example\` function to return the
 * code example you'd like to see in Figma
*/

figma.connect(${componentName}, "${figmaNodeUrl}", {
  props: ${generateProps(component)},
  example: (props) => <${componentName} />
})
`;
            let formatted = await prettier.format(codeConnect, {
                parser: 'typescript',
                semi: false,
            });
            const fileName = outFile ?? `${process.env.INIT_CWD ?? process.cwd()}/${componentName}.figma.tsx`;
            fs_1.default.writeFileSync(fileName, formatted);
            logging_1.logger.info(`Created ${fileName}`);
        }
        else {
            logging_1.logger.error(`Failed to get node information from Figma with status: ${response.status}`);
            logging_1.logger.debug('Failed to get node information from Figma with Body:', response.data);
        }
    }
    catch (err) {
        if ((0, axios_1.isAxiosError)(err)) {
            if (err.response) {
                logging_1.logger.error(`Failed to get node data from Figma (${err.code}): ${err.response?.status} ${err.response?.data?.err ?? err.response?.data?.message}`);
            }
            else {
                logging_1.logger.error(`Failed to get node data from Figma: ${err.message}`);
            }
            logging_1.logger.debug(JSON.stringify(err.response?.data));
        }
        else {
            logging_1.logger.error(`Failed to create: ${err}`);
        }
        process.exit(1);
    }
}
exports.createCodeConnectFromUrl = createCodeConnectFromUrl;
//# sourceMappingURL=create.js.map