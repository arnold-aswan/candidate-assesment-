/// <reference types="react" />
import * as ts from 'typescript';
import { ParserContext } from '../react/parser';
export declare const API_PREFIX = "figma";
export declare const FIGMA_CONNECT_CALL = "figma.connect";
export declare enum IntrinsicKind {
    Enum = "enum",
    String = "string",
    Boolean = "boolean",
    Instance = "instance",
    Children = "children"
}
export interface IntrinsicBase {
    kind: IntrinsicKind;
    args: {};
}
export type ValueMappingKind = string | boolean | number | undefined | JSX.Element | Intrinsic;
export interface FigmaBoolean extends IntrinsicBase {
    kind: IntrinsicKind.Boolean;
    args: {
        figmaPropName: string;
        valueMapping?: Record<'true' | 'false', ValueMappingKind>;
    };
}
export interface FigmaEnum extends IntrinsicBase {
    kind: IntrinsicKind.Enum;
    args: {
        figmaPropName: string;
        valueMapping: Record<string, ValueMappingKind>;
    };
}
export interface FigmaString extends IntrinsicBase {
    kind: IntrinsicKind.String;
    args: {
        figmaPropName: string;
    };
}
export interface FigmaInstance extends IntrinsicBase {
    kind: IntrinsicKind.Instance;
    args: {
        figmaPropName: string;
    };
}
export interface FigmaChildren extends IntrinsicBase {
    kind: IntrinsicKind.Children;
    args: {
        layers: string[];
    };
}
export type Intrinsic = FigmaBoolean | FigmaEnum | FigmaString | FigmaInstance | FigmaChildren;
/**
 * Parses a call expression to an intrinsic
 *
 * @param exp Expression to parse
 * @param parserContext parser context
 * @returns
 */
export declare function parseIntrinsic(exp: ts.CallExpression, parserContext: ParserContext): Intrinsic;
export declare function valueMappingToString(valueMapping: Record<string, ValueMappingKind>): string;
export declare function intrinsicToString({ kind, args }: Intrinsic): string;
//# sourceMappingURL=intrinsics.d.ts.map