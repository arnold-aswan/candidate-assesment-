import ts from 'typescript';
export interface CodeConnectConfig {
    /**
     * Specify glob patterns for files (relative to the project root) to be
     * included when looking for source files. If not specified, all files
     * (except any specified in `exclude`) will be included.
     */
    include?: string[];
    /**
     * Specify glob patterns for files (relative to the project root) to be
     * excluded when looking for source files. If not specified, only
     * `node_modules` will be excluded.
     */
    exclude?: string[];
    /**
     * Optional object of substitutions applied to document URLs (in the format {
     * fromString, toString }) for testing (e.g. remapping a production URL to a
     * staging URL). Not publicly documented.
     */
    documentUrlSubstitutions?: Record<string, string>;
    /**
     * React specific configuration
     */
    react?: {
        /**
         * Maps imports from their path on disk to the specified path.
         * This will rewrite the imports in generated code examples, so it works with
         * relative imports such as `import { Button } from "./"`.
         *
         * Example: { "src/components/*": "@ui/components" }
         * Would rewrite imports for components located in `src/components` to `@ui/components` in
         * generated code examples.
         * `import { Button } from "./"` -> `import { Button } from "@ui/components/Button"`
         */
        importPaths?: Record<string, string>;
        /**
         * For import resolution - this is a temporary solution to support projects that use
         * pnpm workspaces, as the compiler doesn't seem to be able to resolve imports when
         * the package in node_modules is a symlink. Need to look into this more and find a
         * better solution.
         */
        paths?: Record<string, string[]>;
    };
    /**
     * Storybook specific configuration
     */
    storybook?: {
        /**
         * The URL of the Storybook instance for the project
         */
        url: string;
    };
}
export declare function getGitRemoteURL(repoPath: string): string;
/**
 * Finds the URL of a remote file
 * @param filePath absolute file path on disk
 * @param repoURL remote URL
 * @returns
 */
export declare function getRemoteFileUrl(filePath: string, repoURL?: string): string;
export declare function getStorybookUrl(filePath: string, storybookUrl: string): string;
export interface ProjectInfo {
    /**
     * Absolute path of the project directory
     */
    absPath: string;
    /**
     * An array of all tsx files in the project
     */
    files: string[];
    /**
     * The git remote URL of the project
     */
    remoteUrl: string;
    /**
     * The parsed Code Connect config file
     */
    config?: CodeConnectConfig;
    /**
     * TS program containing all tsx files in the project
     */
    tsProgram: ts.Program;
}
/**
 * Gets information about a project from a directory.
 *
 * @param dir Directory containing the project
 * @param configPath Optional path to Code Connect config file
 * @returns Object containing information about the project
 */
export declare function getProjectInfo(dir: string, configPath?: string): ProjectInfo;
export declare function resolveImportPath(filePath: string, config: CodeConnectConfig): string | null;
//# sourceMappingURL=project.d.ts.map